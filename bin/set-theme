#!/usr/bin/env bash

function yell () { >&2 echo "$*";  }
function die () { yell "$*"; exit 1; }
function try () { "$@" || die "Command failed: $*"; }

script_path="$( realpath "$0" )"
script_dir="$( dirname "$script_path" )"

theme="$( flavours list | tr " " "\n" |  rofi -i -dmenu )"
if test -z "$theme"; then
    exit 0
fi

# This function returns the desired background opacity for a specified theme.
# Different themes have different opacities because darker backgrounds need
# more transparency than lighter ones.
function get_background_opacity() {
    local theme="$1"

    local default_opacity
    default_opacity='0.9'

    declare -A opacity_lookup=(
        ['classic-dark']='0.9'
        ['default-dark']='1.0'
        ['dracula']='0.95'
        ['embers']='0.90'
        ['gruvbox-dark-hard']='0.95'
        ['outrun-dark']='0.85'
        ['solarized-dark']='0.95'
    )

    if test -z "$theme"; then
        die 'Error: no theme specified'
    fi

    opacity="${opacity_lookup["$1"]}"

    if test -z "$opacity"; then
        opacity="$default_opacity"
    fi

    echo "$opacity"
}

# Set the background opacity in kitty config for the specified theme
background_opacity="$(get_background_opacity "$theme")"
sed -Ei "s/^background_opacity.*/background_opacity $background_opacity/" "$DOTFILES/config/kitty.conf"

# TODO: Either add flavours to provision script or install it here if it's
# missing
if ! command -v flavours &>/dev/null; then
    flavours_url="https://github.com/Misterio77/flavours/releases/latest"
    die "Error: flavours is not installed; download and install it from: $flavours_url"
fi

# Run flavours to render the config templates into all dotfiles
try flavours apply "$theme"

# Reload i3 config and restart i3bar which doesn't support reloading config at
# runtime. Sleep for 50ms afterwards to give the compositor time to start up so
# kitty background opacity functions correctly. Normally it should already be
# running and won't restart but if it stopped for some reason, i3 should start
# it up again on a reload.
try i3-msg reload
i3-msg -t command 'exec --no-startup-id killall i3bar'
i3-msg -t command 'exec --no-startup-id i3bar --bar_id=bar-0'
sleep 0.05

# Send SIGUSR1 signal to all kitty processes which forces them to reload
# config. Because we launch kitty using the x-terminal-emulator alternative we
# also have to search for that in the `ps` output. It's possible this could
# pick up non-kitty terminals such as when the alternative is set to `urxvt`,
# launched, and then switched back to kitty; however, this signal should be
# harmless anyways so we can ignore that edge case.
kitty_pids="$(
    ps aux | \
        grep -E '(x-terminal-emulator|kitty)' | \
        grep -v 'grep' | \
        awk '{print $2}' | \
        uniq
)"
if test -n "$kitty_pids"; then
    echo "$kitty_pids" | xargs kill -SIGUSR1
fi

theme_cfg_file="$HOME/.config/pcewing/theme.txt"
theme_cfg_dir="$( dirname "$theme_cfg_file" )"
mkdir -p "$theme_cfg_dir"
echo "$theme" >> "$theme_cfg_file"

# TODO: Is it possible to reload tmux config across all running sessions?
# It can be reloaded in a single session via `source-file ~/.tmux.conf` but
# maybe there's a way to send that command to all sessions?
#
# These look promising:
# https://serverfault.com/questions/339390/run-command-in-detached-tmux-session
# https://unix.stackexchange.com/questions/409861/is-it-possible-to-send-input-to-a-tmux-session-without-connecting-to-it
#
# Maybe we can do something like `tmux list-sessions` and then iterate over the
# results and use `send-keys` to execute that command on all of them
