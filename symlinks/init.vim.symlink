" General Config
set nocompatible
set number                      "Line numbers are good
set backspace=indent,eol,start  "Allow backspace in insert mode
set history=1000                "Store lots of :cmdline history
set showcmd                     "Show incomplete cmds down the bottom
set showmode                    "Show current mode down the bottom
set gcr=a:blinkon0              "Disable cursor blink
set visualbell                  "No sounds
set autoread                    "Reload files changed outside vim
set laststatus=2                "Always display the status line
set hidden                      "Hide buffer instead of closing it
set pastetoggle=<F2>            "Paste without being smart
set splitbelow
set splitright

" Indentation
set autoindent
set smartindent
set smarttab
set shiftwidth=2
set softtabstop=2
set tabstop=2
set expandtab

set ruler

" Add a visual indicator to the line the cursor is on.
function s:SetCursorLine()
  set cursorline
  hi CursorLine cterm=NONE ctermbg=black
endfunction
autocmd VimEnter * call s:SetCursorLine()

" Load Plugins
call plug#begin('~/.config/nvim/plugged')

" Fuzzy File Finder is awesome for opening files by name.
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'

" Solarized > all.
Plug 'altercation/vim-colors-solarized'

" Code Completion
Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }

" Language support.
Plug 'elixir-lang/vim-elixir'
Plug 'slashmili/alchemist.vim'

Plug 'OmniSharp/omnisharp-vim'
Plug 'OrangeT/vim-csharp'
Plug 'tpope/vim-dispatch'

call plug#end()

" Configure Plugins

" Deoplete
" Use deoplete.
let g:deoplete#enable_at_startup = 1

" Colors and Theme
silent! colorscheme solarized
set background=dark

" Custom Controls

" Set the Leader key. I leave the leader key as '\' and remap ' ' to it
" instead of setting ' ' as the leader. This is so that showcmd is actually
" useful.
map <Space> <Leader>

" Buffer Controls
" All buffer controls begin with <Leader>b
"  - n : Next buffer
"  - p : Previous buffer
"  - e : Open explorer in a new buffer
"  - f : Open file in a new buffer
"  - d : Unload the buffer (Fails if there are unwritten changes)
nnoremap <Leader>bn :bn<CR>
nnoremap <Leader>bp :bp<CR>
nnoremap <Leader>be :Ex<CR>
nnoremap <Leader>bf :n<Space>
nnoremap <Leader>bd :bd<CR>

" Window Controls
" All window controls begin with <Leader>w
"  - l : Move to the window on the left
"  - j : Move to the window on the bottom
"  - k : Move to the window on the top
"  - l : Move to the window on the right
"  - nh : Open a file from the explorer in a horizontal split
"  - nv : Open a file from the explorer in a vertical split
"  - rh : Resize the window horizontally (Width)
"  - rv : Resize the window vertically (Height)
nnoremap <Leader>wh <C-w>h
nnoremap <Leader>wj <C-w>j
nnoremap <Leader>wk <C-w>k
nnoremap <Leader>wl <C-w>l
nnoremap <Leader>wsh :sp<CR>
nnoremap <Leader>wsv :vsp<CR>
nnoremap <Leader>wnh :Sex<CR>
nnoremap <Leader>wnv :Sex!<CR>
nnoremap <Leader>wrh :resize<Space>
nnoremap <Leader>wrv :vertical<Space>resize<Space>

" Tab Controls
" All tab controls begin with <Leader>t
"  - n : Move to the next tab
"  - p : Move to the previous tab
"  - e : Open explorer in a new tab
nnoremap <Leader>tn :tabnext<CR>
nnoremap <Leader>tp :tabprevious<CR>
nnoremap <Leader>te :Te<CR>

" Grep Controls
" All grep controls begin with <Leader>g
"  - l : Grep for literal string
"  - r : Grep for regex string
nnoremap <Leader>gl :grep<Space>-F<Space>-R<space>'
nnoremap <Leader>gr :grep<Space>-R<Space>'

" Quickfix Controls
" All quickfix controls begin with <Leader>c
"  - n : Move to next quickfix
"  - p : Move to previous quickfix
"  - o : Open the quickfix list
"  - c : Close the quickfix list
nnoremap <Leader>cn :cn<CR>
nnoremap <Leader>cp :cp<CR>
nnoremap <Leader>co :copen<CR>
nnoremap <Leader>cc :cclose<CR>

" General Controls
"  - n : Write current buffer
nnoremap <Leader>w :w<CR>

" Open FZF
nnoremap <Leader>o :FZF<CR>

" Leader Copy/Paste Controls
" These haven't been working as expected so I'm excluding for now.
"vmap <Leader>y "+y
"vmap <Leader>d "+d
"vmap <Leader>p "+p
"vmap <Leader>P "+P
"nmap <Leader>p "+p
"nmap <Leader>P "+P

nmap <leader>ls :ls<cr>:buffer<space>


" Set up netrw to act like a normal file explorer
" Shamelessly stolen from:
" http://ivanbrennan.nyc/blog/2014/01/16/rigging-vims-netrw/
fun! VexToggle(dir)
  if exists("t:vex_buf_nr")
    call VexClose()
  else
    call VexOpen(a:dir)
  endif
endf

fun! VexOpen(dir)
  let g:netrw_browse_split=4
  let vex_width = 30

  execute "Vexplore " . a:dir
  let t:vex_buf_nr = bufnr("%")
  wincmd H

  call VexSize(vex_width)
endf

fun! VexClose()
  let cur_win_nr = winnr()
  let target_nr = ( cur_win_nr == 1 ? winnr("#") : cur_win_nr )

  1wincmd w
  close
  unlet t:vex_buf_nr

  execute (target_nr - 1) . "wincmd w"
  call NormalizeWidths()
endf

fun! VexSize(vex_width)
  execute "vertical resize" . a:vex_width
  set winfixwidth
  call NormalizeWidths()
endf

fun! NormalizeWidths()
  let eadir_pref = &eadirection
  set eadirection=hor
  set equalalways! equalalways!
  let &eadirection = eadir_pref
endf

augroup NetrwGroup
  autocmd! BufEnter * call NormalizeWidths()
augroup END

noremap <Leader>e :call VexToggle(getcwd())<CR>
noremap <Leader>. :call VexToggle("")<CR>
