# =========================
# +++ Table of Contents +++
# =========================
# 1.0 - General Config
# 1.1 - Aliases
# 1.1.1 - General Aliases
# 1.1.2 - Git Aliases
# 1.1.3 - Tmux Aliases
# 1.2 - Completion Settings
# 1.3 - Application Setup
# 1.4 - Plugins
# 1.5 - Prompt Settings
# 1.6 - Spectrum Settings
# 1.7 - Functions
# 1.8 - Local Config
# =========================


### 1.0 General Config ########################################################
# This file is still, more or less, a copy of Nick Nisi's. I have simply added
# links to the documentation so it's easy to see what each option is for.

# See section 2.5.1: http://zsh.sourceforge.net/Guide/zshguide02.html
setopt NO_BG_NICE
setopt NO_HUP
setopt LOCAL_OPTIONS
setopt LOCAL_TRAPS
setopt PROMPT_SUBST

# See section 2.5.3: http://zsh.sourceforge.net/Guide/zshguide02.html
setopt HIST_VERIFY

# See section 2.5.4: http://zsh.sourceforge.net/Guide/zshguide02.html
HISTFILE=~/.zsh_history
HISTSIZE=1000
SAVEHIST=1000

# See section 2.5.5: http://zsh.sourceforge.net/Guide/zshguide02.html
setopt SHARE_HISTORY
setopt EXTENDED_HISTORY
setopt HIST_IGNORE_ALL_DUPS
setopt HIST_REDUCE_BLANKS

# See section 4.2.2: http://zsh.sourceforge.net/Guide/zshguide04.html
setopt IGNORE_EOF

# See section 6.2.1: http://zsh.sourceforge.net/Guide/zshguide06.html
setopt NO_LIST_BEEP

# See section 6.2.4: http://zsh.sourceforge.net/Guide/zshguide06.html
setopt COMPLETE_ALIASES

# See section 9.1: http://zsh.sourceforge.net/Doc/Release/Zsh-Line-Editor.html
export DOTFILES=$HOME/.dotfiles

# Add the following directories to PATH if they exist:
[[ -d /usr/local/bin ]]    && export PATH=/usr/local/bin:$PATH
[[ -d /usr/local/sbin ]]   && export PATH=/usr/local/sbin:$PATH
[[ -d $DOTFILES/bin ]]     && export PATH=$DOTFILES/bin:$PATH
[[ -d ~/bin ]]             && export PATH=~/bin:$PATH
[[ -d ~/.rvm ]]            && export PATH=$HOME/.rvm/bin:$PATH
[[ -d ~/.npm-global/bin ]] && export PATH=$HOME/.npm-global/bin:$PATH
###############################################################################


### 1.1 Aliases ###############################################################
# 1.1.1 General Aliases
# Reload zsh config.
alias reload!='source ~/.zshrc'

# Forget about vim.
alias vim="nvim"

# Filesystem aliases
alias ..='cd ..'
alias ...='cd ../..'
alias ....="cd ../../.."
alias .....="cd ../../../.."
alias ls="ls --color"
alias l="ls -lah --color"
alias la="ls -AF --color"
alias ll="ls -lFh --color"
alias lld="ls -l | grep ^d"
alias rmf="rm -rf"

# Helpers
alias grep='grep --color=auto'
alias df='df -h' # disk free, in Gigabytes, not bytes
alias du='du -h -c' # calculate disk usage for a folder

# IP addresses
alias ip="dig +short myip.opendns.com @resolver1.opendns.com"
alias localip="ipconfig getifaddr en1"
alias ips="ifconfig -a | perl -nle'/(\d+\.\d+\.\d+\.\d+)/ && print $1'"

# Flush Directory Service cache
alias flush="dscacheutil -flushcache"

# View HTTP traffic
alias sniff="sudo ngrep -d 'en1' -t '^(GET|POST) ' 'tcp and port 80'"
alias httpdump="sudo tcpdump -i en1 -n -s 0 -w - | grep -a -o -E \"Host\: .*|GET \/.*\""

# Recursively delete `.DS_Store` files
alias cleanup="find . -name '*.DS_Store' -type f -ls -delete"

# File size
alias fs="stat -f \"%z bytes\""

# ROT13-encode text. Works for decoding, too! ;)
alias rot13='tr a-zA-Z n-za-mN-ZA-M'

# 1.1.2 Git Aliases
alias ga='git add'
alias gc='git commit'
alias gaa='git add --all'
alias gb='git branch'
alias gl='git pull'
alias gp='git push'
alias gd='git diff'
alias gdc='git diff --cached'
alias gs='git s'
alias gss='git stash save'
alias gsp='git stash pop'
alias gmv='git mv'
alias grm='git rm'
alias grn='git-rename'
alias glog="git l"

alias git-amend='git commit --amend -C HEAD'
alias git-undo='git reset --soft HEAD~1'
alias git-count='git shortlog -sn'
alias git-undopush="git push -f origin HEAD^:master"

# git root
alias gr='[ ! -z `git rev-parse --show-cdup` ] && cd `git rev-parse --show-cdup || pwd`'

alias sub-pull='git submodule foreach git pull origin master'

# 1.1.3 Tmux Aliases
alias ta='tmux attach'
alias tls='tmux ls'
alias tat='tmux attach -t'
alias tns='tmux new-session -s'
###############################################################################


### 1.2 Completion Settings ###################################################
# TODO: Go through this section more thoroughly to understand it.
# matches case insensitive for lowercase
zstyle ':completion:*' matcher-list 'm:{a-z}={A-Z}'

# pasting with tabs doesn't perform completion
zstyle ':completion:*' insert-tab pending

# default to file completion
zstyle ':completion:*' completer _expand _complete _files _correct _approximate

zstyle ':completion:*' verbose yes
zstyle ':completion:*:descriptions' format '%B%d%b'
zstyle ':completion:*:messages' format '%d'
zstyle ':completion:*:warnings' format 'No matches for: %d'
zstyle ':completion:*' group-name ''
###############################################################################


### 1.3 Application Setup #####################################################
export EDITOR='nvim'

# Set up Node Version Manager.
export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"

[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh

# Alias git to hub; see https://github.com/github/hub
if hash hub 2>/dev/null; then
    eval "$(hub alias -s)"
fi
###############################################################################


### 1.4 Plugins ###############################################################
if [ -z ${ZSH_PLUGINS_LOADED+x} ]; then
    # zsh-syntax-highlighting
    source ~/.zsh/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
    # zsh-autosuggestions
    source ~/.zsh/zsh-autosuggestions/zsh-autosuggestions.zsh
fi

ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE='fg=10'

ZSH_PLUGINS_LOADED=1
###############################################################################

### 1.5 Prompt Settings #######################################################
# https://github.com/sindresorhus/pure

fpath=( "$HOME/.zfunctions" $fpath )
autoload -U promptinit; promptinit
prompt pure

###############################################################################


### 1.6 Spectrum Settings #####################################################
# A script to make using 256 colors in zsh less painful.
# P.C. Shyamshankar <sykora@lucentbeing.com>
# Copied from http://github.com/sykora/etc/blob/master/zsh/functions/spectrum/

typeset -Ag FX FG BG

FX=(
    reset     "%{[00m%}"
    bold      "%{[01m%}" no-bold      "%{[22m%}"
    italic    "%{[03m%}" no-italic    "%{[23m%}"
    underline "%{[04m%}" no-underline "%{[24m%}"
    blink     "%{[05m%}" no-blink     "%{[25m%}"
    reverse   "%{[07m%}" no-reverse   "%{[27m%}"
)

for color in {000..255}; do
    FG[$color]="%{[38;5;${color}m%}"
    BG[$color]="%{[48;5;${color}m%}"
done

# Show all 256 colors with color number
function spectrum_ls() {
  for code in {000..255}; do
    print -P -- "$code: %F{$code}Test%f"
  done
}
###############################################################################


### 1.7 Functions #############################################################

function download_aur {
  (
    app=$1

    mkdir -p ~/builds
    cd ~/builds
    curl -L -O https://aur.archlinux.org/cgit/aur.git/snapshot/${app}.tar.gz
    tar -xvf ${app}.tar.gz

    # This generally isn't safe but I only use it on trusted packages.
    cd ${app}
    makepkg --noconfirm -sri
  )
}

# print available colors and their numbers
function colours() {
    for i in {0..255}; do
        printf "\x1b[38;5;${i}m colour${i}"
        if (( $i % 5 == 0 )); then
            printf "\n"
        else
            printf "\t"
        fi
    done
}

# Create a new directory and enter it
function md() {
    mkdir -p "$@" && cd "$@"
}

function hist() {
    history | awk '{a[$2]++}END{for(i in a){print a[i] " " i}}' | sort -rn | head
}

# find shorthand
function f() {
    find . -name "$1"
}

# Start an HTTP server from a directory, optionally specifying the port
function server() {
    local port="${1:-8000}"
    open "http://localhost:${port}/"
    # Set the default Content-Type to `text/plain` instead of `application/octet-stream`
    # And serve everything as UTF-8 (although not technically correct, this doesnâ€™t break anything for binary files)
    python -c $'import SimpleHTTPServer;\nmap = SimpleHTTPServer.SimpleHTTPRequestHandler.extensions_map;\nmap[""] = "text/plain";\nfor key, value in map.items():\n\tmap[key] = value + ";charset=UTF-8";\nSimpleHTTPServer.test();' "$port"
}

# take this repo and copy it to somewhere else minus the .git stuff.
function gitexport(){
    mkdir -p "$1"
    git archive master | tar -x -C "$1"
}

# get gzipped size
function gz() {
    echo "orig size    (bytes): "
    cat "$1" | wc -c
    echo "gzipped size (bytes): "
    gzip -c "$1" | wc -c
}

# All the dig info
function digga() {
    dig +nocmd "$1" any +multiline +noall +answer
}

# Escape UTF-8 characters into their 3-byte format
function escape() {
    printf "\\\x%s" $(printf "$@" | xxd -p -c1 -u)
    echo # newline
}

# Decode \x{ABCD}-style Unicode escape sequences
function unidecode() {
    perl -e "binmode(STDOUT, ':utf8'); print \"$@\""
    echo # newline
}

# Extract archives - use: extract <file>
# Credits to http://dotfiles.org/~pseup/.bashrc
function extract() {
    if [ -f $1 ] ; then
        case $1 in
            *.tar.bz2) tar xjf $1 ;;
            *.tar.gz) tar xzf $1 ;;
            *.bz2) bunzip2 $1 ;;
            *.rar) rar x $1 ;;
            *.gz) gunzip $1 ;;
            *.tar) tar xf $1 ;;
            *.tbz2) tar xjf $1 ;;
            *.tgz) tar xzf $1 ;;
            *.zip) unzip $1 ;;
            *.Z) uncompress $1 ;;
            *.7z) 7z x $1 ;;
            *) echo "'$1' cannot be extracted via extract()" ;;
        esac
    else
        echo "'$1' is not a valid file"
    fi
}

# 1.X.2 Git Functions
function give-credit() {
    git commit --amend --author $1 <$2> -C HEAD
}

# a simple git rename file function
# git does not track case-sensitive changes to a filename.
function git-rename() {
    git mv $1 "${2}-"
    git mv "${2}-" $2
}

function g() {
    if [[ $# > 0 ]]; then
        # if there are arguments, send them to git
        git $@
    else
        # otherwise, run git status
        git s
    fi
}
###############################################################################


### 1.8 Local Config ##########################################################
# Source ~/.localrc if it exists. This is where confidential information such 
# as API keys should be stored; this file should not reside in the public 
# repository.
if [[ -e ~/.localrc ]]; then
    source ~/.localrc
fi

if [[ -e ~/.profile ]]; then
    source ~/.profile
fi
###############################################################################

[[ -z $TMUX ]] && tmux

###############################################################################
# Other stuff from Nick's original file. I'm going to comment these out for now
# while I set up my own configuration, but leave them here so that I can come 
# back and add the options that sound appealing.

# TODO: Evaluate
# http://www.csse.uwa.edu.au/programming/linux/zsh-doc/zsh_23.html
# initialize autocomplete
#autoload -U compinit add-zsh-hook
#compinit

